#include <iostream>
#include <set>
#include <unordered_set>
#include <vector>
#include <queue>
#include <algorithm>
#include <stack>
#include <map>
#include <unordered_map>
#include <math.h>
#include <stack>
#include <list>
#include <sstream>
using namespace std;
/**lc120三角形最小路径和
给定一个三角形 triangle ，找出自顶向下的最小路径和。
每一步只能移动到下一行中相邻的结点上。
 相邻的结点 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点。
 也就是说，如果正位于当前行的下标 i ，那么下一步可以移动到下一行的下标 i 或 i + 1 。
*/
int minimumTotal(vector<vector<int>>& triangle) {
    int n = triangle.size();
    vector<int>f(triangle[n-1].begin(),triangle[n-1].end()),g(n);
    for(int i = n-2;i >= 0;i--){
        for(int j = 0;j <= i;j++)
            g[j] = min(f[j],f[j+1]) + triangle[i][j];
        f = g;
    }
    return f[0];
}
/**lc63不同路径II
一个机器人位于一个m x n网格的左上角 （起始点在下图中标记为 “Start” ）。
机器人每次只能向下或者向右移动一步。
机器人试图达到网格的右下角（在下图中标记为 “Finish”）。
现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？
网格中的障碍物和空位置分别用 1 和 0 来表示。
*/
int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
    int n = obstacleGrid.size(),m = obstacleGrid[0].size();
    vector<vector<int>>f(n,vector<int>(m));
    f[0][0] = 1;
    for(int i = 0; i < n;i++)
        for(int j = 0; j < m; j++) {
            if (obstacleGrid[i][j] == 1)f[i][j] = 0;
            else {
                if (i)f[i][j] += f[i - 1][j];
                if (j)f[i][j] += f[i][j - 1];
            }
        }
    return f[n-1][m-1];
}
/**lc354俄罗斯套娃信封问题
给你一个二维整数数组 envelopes ，其中 envelopes[i] = [wi, hi] ，表示第 i 个信封的宽度和高度。
当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。
请计算 最多能有多少个 信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。
注意：不允许旋转信封。
*/
static bool cmp(const pair<int,int>&a,const pair<int,int>&b){
    if(a.first != b.first)return a.first < b.first;
    return a.second > b.second;
}
int maxEnvelopes(vector<pair<int,int>>& envelopes) {
    int n = envelopes.size();
    sort(envelopes.begin(),envelopes.end(),cmp);
    vector<int>q;
    for(auto item :envelopes){
        int y = item.second;
        if (q.empty() || y > q.back())q.push_back(y);
        else{
            int l = 0,r = q.size()-1;
            while (l < r){
                int mid = l + r >>1;
                if(q[mid] >= y)r = mid;
                else l = mid +1;
            }
            q[l] = min(q[l],y);
        }

    }
    return q.size();
}
/**lc338比特位计数
 给你一个整数 n ，对于 0 <= i <= n 中的每个 i ，
 计算其二进制表示中 1 的个数 ，返回一个长度为 n + 1 的数组 ans 作为答案。*/
vector<int> countBits(int n) {
    vector<int>f(n+1);
    f[0] = 0;
    for(int i = 1;i <= n;i++)
        f[i] = f[i>>1]+(i&1);
    return f;
}
/**lc329矩阵中的最长递增路径
给定一个m x n 整数矩阵matrix ，找出其中最长递增路径的长度。
对于每个单元格，你可以往上，下，左，右四个方向移动。
 你不能在对角线方向上移动或移动到 边界外（即不允许环绕）。
*/
vector<vector<int>>f;
int dx[4] = {-1,0,1,0},dy[4] ={0,1,0,-1};
int n,m;
int dp(int x,int y,vector<vector<int>>&matrix){
    if(f[x][y] != -1)return f[x][y];
    f[x][y] = 1;
    for(int i = 0;i < 4;i++){
        int a = x + dx[i],b = y + dy[i];
        if(a >= 0 && a < n && b >= 0 && b < n && matrix[a][b] > matrix[x][y]){
            f[x][y] = max(f[x][y],dp(a,b,matrix)+1);
        }
    }
    return f[x][y];
}
int longestIncreasingPath(vector<vector<int>>& matrix) {
    if(matrix.empty())return 0;
    n = matrix.size(),m = matrix[0].size();
    f = vector<vector<int>>(n,vector<int>(m,-1));
    int res = 0;
    for(int i = 0;i < n;i++)
        for(int j = 0;j < m;j++)
            res = max(res,dp(i,j,matrix));
    return res;
}
/**lc322零钱兑换
 * 给你一个整数数组 coins ，表示不同面额的硬币；
 * 以及一个整数 amount ，表示总金额。
计算并返回可以凑成总金额所需的 最少的硬币个数。
如果没有任何一种硬币组合能组成总金额，返回 -1 。
你可以认为每种硬币的数量是无限的*/

int coinChange(vector<int>& coins, int amount) {
    vector<int>f(amount+1,INT_MAX/2);
    f[0] = 0;
    for(auto c : coins)
        for(int i = c;i <= amount;i++)
            f[i] = min(f[i],f[i-c]+1);
    if(f[amount] == INT_MAX/2)return -1;
    return f[amount];
}
/**lc221最大正方形
 在一个由 '0' 和 '1' 组成的二维矩阵内，找到只包含 '1' 的最大正方形，并返回其面积。*/
int maximalSquare(vector<vector<char>>& matrix) {
    if(!matrix.size())return 0;
    if(matrix[0].empty())return 0;
    int m = matrix.size(),n = matrix[0].size();
    vector<vector<int>>dp(m,vector<int>(n,0));
    int res  = 0;
    for(int i = 0;i < m;i++)
        for(int j = 0;j < n;j++){
            if(matrix[i][j] == '0')dp[i][j] = 0;
            else{
                dp[i][j] = 1;
                if(i >= 1 && j >= 1)dp[i][j] += min(dp[i-1][j],min(dp[i-1][j-1],dp[i][j-1]));
                if(dp[i][j]>res)res = dp[i][j];
            }
        }
    return res*res;
}
/**lc576出界的路径数
 * 给你一个大小为 m x n 的网格和一个球。
 球的起始坐标为 [startRow, startColumn] 。
你可以将球移到在四个方向上相邻的单元格内（可以穿过网格边界到达网格之外/
 你最多可以移动 maxMove 次球。
给你五个整数 m、n、maxMove、startRow 以及 startColumn，
 找出并返回可以将球移出边界的路径数量。因为答案可能非常大，
 返回对 109 + 7 取余 后的结果。*/
vector<vector<vector<int>>>f;
int dx[4] = {-1,0,1,0},dy[4] = {0,1,0,-1};
int mod = 1000000007;
int dp(int m,int n,int k,int x,int y){
    int &v = f[x][y][k];
    if(v != -1)return v;
    v = 0;
    if(!k)return v;
    for(int i = 0;i < 4;i++){
        int a = x + dx[i],b = y + dy[i];
        if(a < 0 || a == m || b<0 || b==n)v++;
        else v += dp(m,n,k-1,a,b);
        v %= mod;
    }
    return v;
}
int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
    f = vector<vector<vector<int>>>(m,vector<vector<int>>(n,vector<int>(maxMove+1,-1)));
    return dp(m,n,maxMove,startRow,startColumn);
}
/**lc91解码方法一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：
'A' -> "1"
'B' -> "2"
'Z' -> "26"
要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。
例如，"11106" 可以映射为：
"AAJF" ，将消息分组为 (1 1 10 6)
"KJF" ，将消息分组为 (11 10 6)
注意，消息不能分组为  (1 11 06),因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。
给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。
题目数据保证答案肯定是一个 32 位 的整数。*/
int numDecodings(string s) {
    int n = s.size();
    vector<int>f(n+1);
    s = ' ' + s;
    f[0] = 1;
    for(int i = 1;i <= n;i++){
       f[i] = 0;
       if(s[i] != 0)f[i] += f[i-1];
       if(i > 1){
           int t = (s[i-1]-'0')*10 + s[i] - '0';
           if(t >= 10 && t <= 26)f[i] += f[i-2];
       }
    }
    return f[n];
}
/**lc264丑数II
给你一个整数 n ，请你找出并返回第 n个 丑数
丑数 就是只包含质因数 2、3 和/或 5 的正整数*/
int nthUglyNumber(int n) {
    vector<int>q;
    q.push_back(1);
    int i = 0,j = 0,k = 0;
    while (--n){
        int t = min(q[i] * 2,min(q[j]*3,q[k]*5));
        q.push_back(t);
        if(q[i] * 2 == t)i++;
        if(q[j] * 3 == t)j++;
        if(q[k] * 5 == t)k++;
    }
    return q.back();
}
/**lc115不同的子序列
给定一个字符串 s 和一个字符串 t ，计算在 s 的子序列中 t 出现的个数。
字符串的一个 子序列 是指，通过删除一些（也可以不删除）字符且不干扰剩余字符
相对位置所组成的新字符串。（例如，"ACE" 是 "ABCDE" 的一个子序列，而 "AEC" 不是）
题目数据保证答案符合 32 位带符号整数范围*/
int numDistinct(string s, string t) {
    int n = s.size(),m = t.size();
    vector<vector<int>>f(n+1,vector<int>(m+1));
    for(int i = 0; i <= n;i++)f[i][0] = 1;//s前i个字母至少有一个序列（空）是t的子序列
    for(int i = 1; i <= n;i++)
        for(int j = 1;j <= m;j++){
            f[i][j] = f[i-1][j];
            if(s[i-1] == t[j-1])
                f[i][j] += f[i-1][j-1];
        }
    return f[n][m];
}
/**lc132分割回文串
给你一个字符串 s，请你将 s 分割成一些子串，使每个子串都是回文。
返回符合要求的 最少分割次数 。*/
int minCut(string s) {
    int n = s.size();
    vector<vector<bool>> c(n,vector<bool>(n, false));
    //第一次子循环l == r;
    //第二次子循环
    for(int i = 1;i <= n;i++)
        for(int j = 0;j+i-1 < n;j++){
            int l = j, r = j+i-1;
            c[l][r] = s[l]==s[r] && (l+1 > r-1 || c[l+1][r-1]);
        }
    vector<int>f(n+1);
    f[0] = 0;
    for(int i = 1;i <= n;i++) {
        f[i] = INT_MAX;
        for (int j = 1; j <= i; j++)
            if (c[j - 1][i - 1])//下标从j-1到i-1
                f[i] = min(f[i], f[j - 1] + 1);//下标为i-1的那个字符串的最小回文段数等于min(它目前本身的，字符串走到下标为j-2的最小回文段数+1)
    }
    return f[n]-1;
}
/**lc526优美的序列
假设有从 1 到 n 的 n 个整数。用这些整数构造一个数组 perm（下标从 1 开始），
 只要满足下述条件 之一 ，该数组就是一个 优美的排列 ：
perm[i]能够被i整除
i 能够被 perm[i] 整除
给你一个整数 n ，返回可以构造的 优美排列 的数量 。*/
int countArrangement(int n) {
    vector<int>f(1<<n);
    f[0] = 1;
    for(int i = 0;i < (1<<n);i++){
        int s = 1;
        for(int j = 0;j < n;j++) s += i >>j & 1;
        for(int j = 1;j <= n;j++)
            if(!(i>>(j-1)&1) && (j %s == 0 || s % j == 0) )
                f[i | (1<<(j-1))] += f[i];

    }
    return f[(1<<n)-1];
}
/**lc486预测赢家
给你一个整数数组 nums 。
玩家 1 和玩家 2 基于这个数组设计了一个游戏。
玩家 1 和玩家 2 轮流进行自己的回合，玩家 1 先手。
开始时，两个玩家的初始分值都是 0.
每一回合，玩家从数组的任意一端取一个数字（即，nums[0] 或 nums[nums.length - 1]），
取到的数字将会从数组中移除（数组长度减 1 ）。玩家选中的数字将会加到他的得分上。
 当数组中没有剩余数字可取时，游戏结束。
如果玩家 1 能成为赢家，返回 true 。如果两个玩家得分相等，同样认为玩家 1 是游戏的赢家，也返回 true 。
 你可以假设每个玩家的玩法都会使他的分数最大化。*/
bool PredictTheWinner(vector<int>& nums) {
    int n = nums.size();
    vector<vector<int>>f(n,vector<int>(n));
    if( n & 1)for(int i = 0;i < n;i++)f[i][i] = nums[i];
    for(int i = 2;i <= n;i++)
        for(int j = 0;j + i -1 < n;j++){
            int l = j,r = j+i-1;
            if((n-(r-l+1))%2 == 0)f[l][r] = max(f[l+1][r] + nums[l],f[l][r-1]+nums[r]);
            else f[l][r] = min(f[l+1][r],f[l][r-1]);
        }
    int sum = 0;
    for(auto x :nums)sum += x;
    return f[0][n-1] >= sum - f[0][n-1];
}
