#include <iostream>
#include <set>
#include <unordered_set>
#include <vector>
using namespace std;
//1.lc231
//给出一个整数，判断是不是2的整数次幂
//所给出的整数是否有范围？
//不清楚为什么要移动30位，移动31位也是可以的
//意思就是来一个最大的2次幂，如果是2的整数次幂，那么是可以被整除的
bool isPowerOfTwo(int n){
    return n > 0 && (1 << 30) % n == 0;
}
//x & -x 结果是留下x二进制最右边的一个1
bool isPowerOfTwo2(int n){
    return n > 0 && (n & -n) == n;
}
//2.lc762
//给定两个整数，去寻找这两个整数之间有多少个数的二进制表示里有质数个1
//条件有l,r均小于10^6.
//10^6小于2^20,也就是这个数最多是20位，那么最多的质数个数是19
int countPrimerSetBits(int L,int R){
    //20以内的质数
    unordered_set<int>primes({2,3,5,7,11,13,17,19});
    int res = 0;
    for(int i = L;i <= R;i++){
        int s = 0;
        for(int k = i;k ;k >>= 1)s += k & 1;
        if(primes.count(s))res++;
    }
    return res;
}
//3.lc136
//给予一个数组，除了一个数其他数出现的次数都是偶数，找出那个出现次数不是偶数的数找出来
int singleNumber(vector<int>& nums){
    int res = 0;
    for(auto x : nums)res ^= x;//相同的两个数^为0
    return res;
}
//4.lc476
//给出一个正整数，求出它的反码
int findComplement(int num){
    int res = 0,t = 0;
    while(num){
        res += !(num & 1)<<t;
        num >>= 1;
        t++;
    }
    return res;
    // return ~num;
    //直接取反是不可以的，这样会把前面的0也取反
}
//5.lc137
//给出一个数组，只有一个数出现一次，其他所有数都出现了三次，让我们把出现一次的数找出来
//我们可以模拟一位是正确的，从而推出32位都是正确的
//初始：0 0
//1个1：1 0
//2个1：0 1
//3个1：0 0
//三个状态下如果来的x是0都会保持原来的状态
int singleNumber(vector<int>& nums){
    int ones = 0,twos = 0;
    for( auto x : nums){
        ones = (ones^x) & ~twos;
        twos = (twos^x) & ~ones;
    }
    return ones;
}
//6.面试题56 1
//给一个数组，只有两个数出现了一次，其他数出现了两次，找出这两个数
vector<int>singleNumber(vector<int>& nums){
    int s = 0;
    for (auto x : nums) s ^= x;
    //这两个次数为1的数异或在一起必定至少有一位是1，那么我们可以把这位是0的数
    //分成一堆，把这为是1的数分为另一堆
    int k = 0;
    while(!(s >> k & 1))k++;
    int s2 = 0;
    for (auto x :nums)
        if(x >> k & 1)//这样的一堆数除了那个单独的数必然是成对出现的，不满足这个条件的数，除了那个单独的数，还可能有一些成对的数
            s2 ^= x;
     //s = a ^ b
     //s2 = a
     //s ^ s2 = a^ b ^ a = b
    return vector<int>({s2,s^s2});
}
//7.lc371
//给出两个整数a和b，算出两个整数a+b的和，不能使用加法和减法
int getSum(int a,int b){
    if(!b)return a;
    int sum = a ^ b;//不进位加法的结果
    int carry = (a & b)<<1;//计算进位；第一次进位后左移一位最后一位是0，等下一轮运算的
    //时候这一位和另一个数的这一位相加，结果还是0，并且又左移一位，保证了最后两位是0，最后carry的结果变成0
    return getSum(sum,carry);//将进位和不进位加法结果相加，什么时候没有进位了，什么时候返回结果
}
//8.lc201
//给定范围m,n,返回这个区间内所有数与的结果
//如果范围较大，从直觉上来讲，后几位都是0，因为都是连续的
int rangeBitwiseAnd(int m,int n){
    int res = 0;
    for(int i = 0;(1ll <<i) <= m;i++){
        if(m >> i & 1){
            //1左移i位-1取反然后再和m相与，会让mi位之后全变成0，然后再加上(1<<i)
            //如果不大于n的话，意味着要相加的数的这一位含0，那么就不用再管这一位了，继续看下一位
            if((m & ~((1<<i)-1))+(1<<i) > n)
                res += 1 <<i;
        }
    }
    return res;
}
//9.lc477
//韩明距离是两个整数二进制不同的位数的个数
//求所有整数对汉明距离的和
//一组数某一位的汉明距离等于0的个数*1的个数，0堆里面挑一个，1堆里面挑一个，这就产生了一个汉明
int totalHammingDistance(vector<int>& nums){
    int res = 0;
    for(int i = 0;i <= 30;i++){
        int ones = 0;
        for(auto x : nums)
            if(x >>i & 1)ones++;
        res += ones* (nums.size() - ones);
    }
    return res;
}
//10.lc421数组中两个数的最大异或值
struct Node{
    int son[2];
};
vector<Node> nodes;
int findMaximumXOR(vector<int>& nums){
    nodes.push_back(Node({0,0}));
    for(auto x :nums){
        int p = 0;
        for(int i = 30; i >= 0;i--){
            int t = x>>i& 1;
            if(!nodes[p].son[t]){
                nodes.push_back(Node({0,0}));
                nodes[p].son[t] = nodes.size() - 1;
            }
            p = nodes[p].son[t];
        }
    }
    int res = 0;
    for(auto x : nums){
        int p = 0,xor_ = 0;
        for(int i = 30;i >= 0;i--){
            int t = x>>i & 1;
            if(nodes[p].son[!t]){
                p = nodes[p].son[!t];
                xor_  += 1 <<i;
            }else{
                p = nodes[p].son[t];
            }
        }
        res = max(res,xor_);
    }
    return res;
}

int main(){

}

