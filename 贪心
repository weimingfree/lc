#include <iostream>
#include <set>
#include <unordered_set>
#include <vector>
#include <queue>
#include <algorithm>
#include <stack>
using namespace std;
//1.lc860柠檬水找零
// 在柠檬水摊上，每一杯柠檬水的售价为5美元。
// 顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。
//每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。
// 你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。
//注意，一开始你手头没有任何零钱。
//给你一个整数数组 bills ，其中 bills[i] 是第 i 位顾客付的账。
// 如果你能给每位顾客正确找零，返回true，否则返回 false。
bool lemonadeChange(vector<int>& bills){
    int fives = 0,tens = 0;
    for (auto b :bills){
        if(b == 5)fives++;
        else if(b == 10){
            if(fives)fives--;
            else return false;
            tens++;
        }else{
            int t = 15;
            if(tens){
                t -= 10;
                tens--;
            }
            while (t  && fives){
                t -= 5;
                fives--;
            }
            if(t)return false;
        }
    }
    return true;
}
//2.lc392判断子序列
// 给定字符串 s 和 t ，判断 s 是否为 t 的子序列。
//字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。
//（例如，"ace"是"abcde"的一个子序列，而"aec"不是）。
// 如果有大量输入的 S，称作 S1, S2, ... , Sk 其中 k >= 10亿，
// 你需要依次检查它们是否为 T 的子序列。在这种情况下，你会怎样改变代码？
bool isSubsequence(string s,string t){
    int k  = 0;
    for(int i = 0;i <t.size() && k < s.size();i++)
        if(t[i] == s[k])
            k++;
    return k == s.size();
}
//3.lc455分发饼干
//假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。
//对每个孩子 i，都有一个胃口值[i]，这是能让孩子们满足胃口的饼干的最小尺寸；
//并且每块饼干 j，都有一个尺寸 s[j]。如果 s[j]>= g[i]，我们可以将这个饼干 j 分配给孩子 i ，
// 这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。
int findContentChildren(vector<int>& g,vector<int>& s){
    sort(g.begin(),g.end());
    sort(s.begin(),s.end());
    int i = 0,j = 0,res = 0;
    for(int i = 0;i <g.size();i++){
        while (j < s.size()  &&  s[j] < g[i])j++;
        if(j < s.size()){
            res++;
            j++;
        }
    }
    return res;
}
//4.lc55跳跃游戏
// 给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。
//数组中的每个元素代表你在该位置可以跳跃的最大长度。
//判断你是否能够到达最后一个下标。
bool canJump(vector<int>& nums){
    int dist = 0;
    for(int i = 0;i < nums.size() && i <= dist;i++){
        dist = max(dist,nums[i]+i);
    }
    return dist >= nums.size() - 1;
}
//5.lc45跳跃游戏2
//给你一个非负整数数组nums ，你最初位于数组的第一个位置。
//数组中的每个元素代表你在该位置可以跳跃的最大长度。
//你的目标是使用最少的跳跃次数到达数组的最后一个位置。
//假设你总是可以到达数组的最后一个位置。
int jump(vector<int>& nums){
    if(nums.size() == 1)return 0;
    int l = 0,r = 0,step = 0;
    while(l <= r){
        int max_r = 0;
        for(int i = l;i <= r;i++){
            max_r = (max_r,i+nums[i]);
        }
        l = r + 1;
        r = max_r;
        step++;
        if(r >= (int)nums.size()-1)break;//以防得到一个非常大的数字
    }
    return step;
}
//6.lc376摆动序列
//如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 摆动序列 。
//第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。
//例如，[1, 7, 4, 9, 2, 5] 是一个 摆动序列 ，因为差值 (6, -3, 5, -7, 3)是正负交替出现的。
//相反，[1, 4, 7, 2, 5]和[1, 7, 4, 5, 5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，
// 第二个序列是因为它的最后一个差值为零。
//子序列 可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。
//给你一个整数数组 nums ，返回 nums 中作为 摆动序列 的 最长子序列的长度 。
int wiggleMaxLength(vector<int>& nums){
    nums.erase(unique(nums.begin(),nums.end()),nums.end());
    if(nums.size() <= 2)return nums.size();
    int res = 2;
    for(int i = 1;i + 1 <nums.size();i++){
        int a = nums[i-1], b = nums[i], c= nums[i+1];
        if(a < b && b > c)res++;
        else if( a > b && b < c)res++;
    }
    return res;
}
//7.lc406根据身高重建序列
// 假设有打乱顺序的一群人站成一个队列，数组 people 表示队列中一些人的属性（不一定按顺序）。
//每个 people[i] = [hi, ki] 表示第 i 个人的身高为 hi ，前面 正好 有 ki 个身高大于或等于 hi 的人。
//请你重新构造并返回输入数组people 所表示的队列。返回的队列应该格式化为数组 queue ，
// 其中 queue[j] = [hj, kj] 是队列中第 j 个人的属性（queue[0] 是排在队列前面的人）。
bool cmp(pair<int,int> a,pair<int,int>b){
    return a.first > b.first || a.first == b.first && a.second < b.second;
}
vector<pair<int,int>>reconstructQueue(vector<pair<int,int>>& people){
    sort(people.begin(),people.end(),cmp);
    vector<pair<int,int>> res;
    for(auto p : people)res.insert(res.begin()+p.second,p);//后续再来要排的人不会出现个头大于等于我但排在我前面的情况
    return res;
}
//8.lc452用最少数量的箭引爆气球
//有一些球形气球贴在一堵用 XY 平面表示的墙面上。墙面上的气球记录在整数数组points，其中points[i] = [xstart, xend]
// 表示水平直径在xstart和xend之间的气球。你不知道气球的确切 y 坐标。
//一支弓箭可以沿着 x 轴从不同点完全垂直地射出。在坐标 x 处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend，
// 且满足xstart≤ x ≤ xend，则该气球会被 引爆。可以射出的弓箭的数量 没有限制 。 弓箭一旦被射出之后，可以无限地前进。
//给你一个数组 points ，返回引爆所有气球所必须射出的 最小弓箭数。
bool cmp(pair<int,int>a,pair<int,int>b){
    return a.second < b.second;
}
int findMinArrowsShots(vector<pair<int,int>>& points){
    sort(points.begin(),points.end(),cmp);
    int res = 0,r = INT_MIN;
    bool flag = false;
    if(points.size() >= 1 && points[0].first == INT_MIN)res++;//避免气球的左端点是负无穷从而没有覆盖到这个点
    for(auto p : points){
        if(p.first > r){
            r = p.second;
            res++;
        }
    }
    return res;
}
//9.lc402移掉k个数字
//给你一个以字符串表示的非负整数 num 和一个整数 k ，移除这个数中的 k 位数字，使得剩下的数字最小。
// 请你以字符串形式返回这个最小的数字。
string removeKdights(string num,int k){
    string res;
    for(char c : num){
        while (res.size() && res.back() > c && k){
            res.pop_back();
            k--;
        }
        res += c;
    }
    while (k--)res.pop_back();
    int i = 0;
    while (i < res.size() && res[i] == '0')i++;
    if(i == res.size())return "0";
    return res.substr(i);

}
//10.lc134加油站
//在一条环路上有n个加油站，其中第i个加油站有汽油gas[i]升。
//你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1个加油站需要消耗汽油cost[i]升。
//你从其中的一个加油站出发，开始时油箱为空。
//给定两个整数数组 gas 和 cost ，如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回-1 。
// 如果存在解，则保证它是唯一的
int canCompleteCircuit(vector<int>& gas,vector<int> &cost){
    int n = gas.size();
    for(int i  = 0,j;i < n;i++){
        int gas_left = 0;
        for(j = 0;j < n;j++){
            int k = (i + j) % n;
            gas_left += gas[k] - cost[k];
            if(gas_left < 0)break;
        }
        if(j >= n)return i;
    }
    return -1;
}
int canCompleteCircuit(vector<int>& gas,vector<int> &cost){
    int n = gas.size();
    for(int i  = 0,j;i < n;i+= j+1){
        int gas_left = 0;
        for(j = 0;j < n;j++){
            int k = (i + j) % n;
            gas_left += gas[k] - cost[k];
            if(gas_left < 0)break;
        }
        if(j >= n)return i;
    }
    return -1;
}
int main(){

}
