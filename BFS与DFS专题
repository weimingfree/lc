#include <iostream>
#include <set>
#include <unordered_set>
#include <vector>
#include <queue>
using namespace std;
//1.lc111二叉树的最小深度
//二叉树 递归
//左右子树的最小深度 + 1 
//
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};
int minDepth(TreeNode* root){
    if(!root)return 0;
    int left = minDepth(root->left);
    int right = minDepth(root->right);
    if(!left || !right)return left+ right + 1;//前提有树才能求深度，如果没有树也不能求深度
    return min(left,right)+1;
}
/*2.lc279
给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。
完全平方数 是一个整数，其值等于另一个整数的平方；
 换句话说，其值等于一个整数自乘的积。
 例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。
*/
int numSquares(int n){
    queue<int> q;
    vector<int>dist(n+1,INT_MAX);
    q.push(0);
    dist[0] = 0;
    while (q.size()){
        int t = q.front();
        q.pop();
        if(t == n)return dist[t];
        for(int i = 1;i * i  + t <=  n;i++){
            int j = t + i * i;
            if(dist[j] > dist[t] + 1){
                dist[j] = dist[t] + 1;
                q.push(j);
            }
        }
    }
    return 0;
}
//3.lc733
//有一幅以m x n的二维整数数组表示的图画image，其中image[i][j]表示该图画的像素值大小。
//你也被给予三个整数 sr , sc 和 newColor 。你应该从像素image[sr][sc]开始对图像进行 上色填充 。
//为了完成 上色工作 ，从初始像素开始，记录初始坐标的 上下左右四个方向上 像素值与初始坐标相同的相连像素点，
//接着再记录这四个方向上符合条件的像素点与他们对应 四个方向上 像素值与初始坐标相同的相连像素点，……，重复该过程。
//将所有有记录的像素点的颜色值改为newColor。
//最后返回 经过上色渲染后的图像
vector<vector<int>> floodFill(vector<vector<int>>& image,int sr,int sc,int newColor){
    if(image.empty() || image[0].empty())return image;

    int dx[4] = {-1,0,1,0},dy[4] = {0,1,0,-1};
    int oldColor = image[sr][sc];
    if(oldColor == newColor)return image;//如果没有此判断条件，如果有这种情况，会进入死循环
    image[sr][sc] = newColor;
    for(int i = 0;i < 4;i++){
        int x = sr+dx[i],y = sc+dy[i];
        if(x >= 0 && x < image.size() && y >= 0 && y < image[0].size() && image[x][y] == oldColor)
            floodFill(image,x,y,newColor);
    }
    return image;
}
//4.lc200
//岛屿数量
// 给你一个由'1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。
//岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。
//此外，你可以假设该网格的四条边均被水包围。
int n,m;
void dfs(vector<vector<char>>& grid,int x,int y){
    int dx[4] = {-1,0,1,0};
    int dy[4] = {0,1,0,-1};
    grid[x][y] ='0';
    for(int i = 0;i <4;i++){
        int a = x + dx[i],b = y +dy[i];
        if(a >= 0 && a < n && b >= 0 && b < m && grid[a][b] == '1')
            dfs(grid,a,b);
    }
}
int numIslands(vector<vector<char>>& grid){
    if(grid.empty() || grid[0].empty())return 0;
    n = grid.size();
    m = grid[0].size();
    int res = 0;
    for(int i = 0;i < n;i++)
        for(int j = 0;j < m;j++)
            if(grid[i][j] == '1'){
                res++;
                dfs(grid,i,j);
            }
    return res;
}
//5.lc130被围绕的区域
// 给你一个 m x n 的矩阵 board ，由若干字符 'X' 和 'O' ，
// 找到所有被 'X' 围绕的区域，并将这些区域里所有的 'O' 用 'X' 填充。
 int m,n;
    int dx[4] = {-1,1,0,0},dy[4] = {0,0,-1,1};
    void dfs(vector<vector<char>>& board,int x,int y){
        board[x][y] = 'Y';
        for(int i = 0;i < 4;i++){
            int x_ = x +dx[i];
            int y_ = y + dy[i];
            if(x_ >= 0 && x_ < m && y_ >= 0 && y_ < n && board[x_][y_] == 'O')dfs(board,x_,y_);
        }
    }
    void solve(vector<vector<char>>& board) {
        m = board.size(),n = board[0].size();
        if(!m || !n)return;
        for(int i = 0;i < m;i++){
            if(board[i][0] == 'O')dfs(board,i,0);
            if(board[i][n-1] == 'O')dfs(board,i,n-1);
        }
        for(int i = 0;i < n;i++){
            if(board[0][i] == 'O')dfs(board,0,i);
            if(board[m-1][i] == 'O')dfs(board,m-1,i);
        }
        for(int i = 0;i < m;i++)
            for(int j = 0;j < n;j++)
                if(board[i][j] == 'O')board[i][j] = 'X';
        for(int i = 0;i < m;i++)
            for(int j = 0;j < n;j++)
                if(board[i][j] == 'Y')board[i][j] = 'O';

    }
int main(){

}
